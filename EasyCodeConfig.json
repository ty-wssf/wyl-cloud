{"author":"wyl","version":"1.2.4","currTypeMapperGroupName":"Default","currTemplateGroupName":"MybatisDDD","currColumnConfigGroupName":"Default","currGlobalConfigGroupName":"Default","typeMapper":{},"template":{"MybatisDDD":{"name":"MybatisDDD","elementList":[{"name":"entity.java","code":"##引入宏定义\n$!define\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/gatewayimpl/database/dataobject\", \".java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"gatewayimpl.database.dataobject\")\n\n##使用全局变量实现默认包导入\n$!autoImport\nimport cn.wyl.common.core.web.domain.BaseEntity;\nimport lombok.Data;\nimport java.io.Serializable;\n\n##使用宏定义实现类注释信息\n#tableComment(\"实体类\")\n@Data\npublic class $!{tableInfo.name} extends BaseEntity {\n\n#foreach($column in $tableInfo.fullColumn)\n    #if(($!{tool.getClsNameByFullName($column.type)} != 'Date') && ($!{column.name} != 'createBy') && ($!{column.name} != 'updateBy') && ($!{column.name} != 'remark'))\n        #if(${column.comment})/**\n        * ${column.comment}\n        */#end\n    \n        private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n    #end\n#end\n\n}"},{"name":"dao.java","code":"##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Dao\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/gatewayimpl/database\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}gatewayimpl.database;\n\nimport $!{tableInfo.savePackageName}.gatewayimpl.database.dataobject.$!{tableInfo.name};\nimport org.apache.ibatis.annotations.Param;\nimport java.util.List;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表数据库访问层\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} {\n    \n    /**\n     * 通过ID查询单条数据\n     *\n     * @param primaryKey 主键\n     * @return 实例对象\n     */\n    $!{tableInfo.name} queryByPrimaryKey($!pk.shortType primaryKey);\n\n    /**\n     * 通过实体作为筛选条件查询\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 对象列表\n     */\n    List<$!{tableInfo.name}> queryAll($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 新增数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 影响行数\n     */\n    int insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 批量新增数据（MyBatis原生foreach方法）\n     *\n     * @param entities List<$!{tableInfo.name}> 实例对象列表\n     * @return 影响行数\n     */\n    int insertBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n    /**\n     * 批量新增或按主键更新数据（MyBatis原生foreach方法）\n     *\n     * @param entities List<$!{tableInfo.name}> 实例对象列表\n     * @return 影响行数\n     */\n    int insertOrUpdateBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n    /**\n     * 修改数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 影响行数\n     */\n    int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n    \n    /**\n     * 通过主键删除数据\n     *\n     * @param primaryKey 主键\n     * @return 影响行数\n     */\n    int deleteByPrimaryKey($!pk.shortType primaryKey);\n    \n}\n"},{"name":"mapper.xml","code":"##引入mybatis支持\n$!mybatisSupport\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Dao.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mybatis\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.gatewayimpl.database.$!{tableInfo.name}Dao\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.gatewayimpl.database.dataobject.$!{tableInfo.name}\" id=\"$!{tableInfo.name}Map\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n\n    <!--查询单个-->\n    <select id=\"queryByPrimaryKey\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        where $!pk.obj.name = #{$!pk.name}\n    </select>\n    \n    <!--通过实体作为筛选条件查询-->\n    <select id=\"queryAll\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        <where>\n#foreach($column in $tableInfo.otherColumn)\n            #if(($!{tool.getClsNameByFullName($column.type)} != 'Date') && ($!{column.name} != 'createBy') && ($!{column.name} != 'updateBy') && ($!{column.name} != 'remark'))\n               <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n            #end\n#end\n        </where>\n    </select>\n\n    <!--新增所有列-->\n    <insert id=\"insert\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values (#foreach($column in $tableInfo.otherColumn)#{$!{column.name}}#if($velocityHasNext), #end#end)\n    </insert>\n\n    <insert id=\"insertBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n        (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n    </insert>\n\n    <insert id=\"insertOrUpdateBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n            (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n        on duplicate key update\n         #foreach($column in $tableInfo.otherColumn)$!column.obj.name = values($!column.obj.name) #if($velocityHasNext), #end#end\n    </insert>\n\n    <!--通过主键修改数据-->\n    <update id=\"update\">\n        update $!{tableInfo.obj.name}\n        <set>\n#foreach($column in $tableInfo.otherColumn)\n            <if test=\"$!column.name != null\">\n                $!column.obj.name = #{$!column.name},\n            </if>\n#end\n        </set>\n        where $!pk.obj.name = #{$!pk.name}\n    </update>\n    \n    <!--通过主键删除-->\n    <delete id=\"deleteByPrimaryKey\">\n        delete from $!{tableInfo.obj.name} where $!pk.obj.name = #{$!pk.name}\n    </delete>\n    \n</mapper>\n"},{"name":"gateway.java","code":"##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Gateway\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/domain/gateway\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}domain.gateway;\n\nimport $!{tableInfo.savePackageName}.gatewayimpl.database.dataobject.$!{tableInfo.name};\nimport cn.wyl.common.core.dto.PageResponse;\nimport org.apache.ibatis.annotations.Param;\nimport java.util.List;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表网关接口\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} {\n    \n    /**\n     * 通过ID查询单条数据\n     *\n     * @param primaryKey 主键\n     * @return 实例对象\n     */\n    $!{tableInfo.name} queryByPrimaryKey($!pk.shortType primaryKey);\n\n    /**\n     * 通过实体作为筛选条件查询\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 对象列表\n     */\n    List<$!{tableInfo.name}> queryAll($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n    \n    /**\n     * 通过实体作为筛选条件查询\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 对象列表\n     */\n    PageResponse<$!{tableInfo.name}> queryPage($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n    \n    /**\n     * 新增数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 影响行数\n     */\n    void insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * 批量新增数据（MyBatis原生foreach方法）\n     *\n     * @param entities List<$!{tableInfo.name}> 实例对象列表\n     * @return 影响行数\n     */\n    void insertBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n    /**\n     * 批量新增或按主键更新数据（MyBatis原生foreach方法）\n     *\n     * @param entities List<$!{tableInfo.name}> 实例对象列表\n     * @return 影响行数\n     */\n    void insertOrUpdateBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n    /**\n     * 修改数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 影响行数\n     */\n    void update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n    \n    /**\n     * 通过主键删除数据\n     *\n     * @param primaryKey 主键\n     * @return 影响行数\n     */\n    void deleteByPrimaryKey($!pk.shortType primaryKey);\n    \n}\n"},{"name":"gatewayimpl.java","code":"##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"GatewayImpl\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/gatewayimpl\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}gatewayimpl;\n\nimport cn.wyl.common.core.exception.Assert;\nimport $!{tableInfo.savePackageName}.gatewayimpl.database.dataobject.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.domain.gateway.$!{tableInfo.name}Gateway;\nimport $!{tableInfo.savePackageName}.gatewayimpl.database.$!{tableInfo.name}Dao;\nimport org.apache.ibatis.annotations.Param;\nimport cn.wyl.common.core.dto.PageResponse;\nimport com.github.pagehelper.PageHelper;\nimport com.github.pagehelper.PageInfo;\nimport org.springframework.stereotype.Component;\nimport javax.annotation.Resource;\nimport java.util.List;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表网关接口\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Component\npublic class $!{tableName} implements $!{tableInfo.name}Gateway {\n       \n    @Resource\n    private $!{tableInfo.name}Dao $!tool.firstLowerCase($!{tableInfo.name})Dao;\n    \n    /**\n     * 通过ID查询单条数据\n     *\n     * @param primaryKey 主键\n     * @return 实例对象\n     */\n    @Override\n    public $!{tableInfo.name} queryByPrimaryKey($!pk.shortType primaryKey) {\n        $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}) = this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.queryByPrimaryKey(primaryKey);\n        Assert.notNull($!tool.firstLowerCase($!{tableInfo.name}), \"查询对象不存在\");\n        return $!tool.firstLowerCase($!{tableInfo.name});\n    }\n\n    /**\n     * 通过实体作为筛选条件查询\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 对象列表\n     */\n    @Override\n    public List<$!{tableInfo.name}> queryAll($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.queryAll($!tool.firstLowerCase($!{tableInfo.name}));\n    }\n    \n    /**\n     * 通过实体作为筛选条件查询\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 对象列表\n     */\n    @Override\n    public PageResponse<$!{tableInfo.name}> queryPage($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        PageHelper.startPage($!tool.append($!tool.firstLowerCase($!{tableInfo.name}),\n    '.getPageIndex()'), $!tool.append($!tool.firstLowerCase($!{tableInfo.name}), '.getPageSize()'));\n        List<$!{tableInfo.name}> list = sysNoticeDao.queryAll($!tool.firstLowerCase($!{tableInfo.name}));\n        PageInfo<$!{tableInfo.name}> pageInfo = new PageInfo<$!{tableInfo.name}>(list);\n        return PageResponse.of(pageInfo.getList(), (int) pageInfo.getTotal(), pageInfo.getPageSize(), pageInfo.getPageNum());\n    }\n    \n    /**\n     * 新增数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 影响行数\n     */\n    @Override\n    public void insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        $!{tool.firstLowerCase($!{tableInfo.name})}Dao.insert($!tool.firstLowerCase($!{tableInfo.name}));\n    }\n\n    /**\n     * 批量新增数据（MyBatis原生foreach方法）\n     *\n     * @param entities List<$!{tableInfo.name}> 实例对象列表\n     * @return 影响行数\n     */\n    @Override\n    public void insertBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities) {\n        $!{tool.firstLowerCase($!{tableInfo.name})}Dao.insertBatch(entities);\n    }\n\n    /**\n     * 批量新增或按主键更新数据（MyBatis原生foreach方法）\n     *\n     * @param entities List<$!{tableInfo.name}> 实例对象列表\n     * @return 影响行数\n     */\n    @Override\n    public void insertOrUpdateBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities) {\n        $!{tool.firstLowerCase($!{tableInfo.name})}Dao.insertOrUpdateBatch(entities);\n    }\n\n    /**\n     * 修改数据\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 实例对象\n     * @return 影响行数\n     */\n    @Override\n    public void update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        Assert.isTrue($!{tool.firstLowerCase($!{tableInfo.name})}Dao.update($!tool.firstLowerCase($!{tableInfo.name})) > 0, \"编辑对象不存在\");\n    }\n    \n    /**\n     * 通过主键删除数据\n     *\n     * @param primaryKey 主键\n     * @return 影响行数\n     */\n    @Override\n    public void deleteByPrimaryKey($!pk.shortType primaryKey) {\n        Assert.isTrue($!{tool.firstLowerCase($!{tableInfo.name})}Dao.deleteByPrimaryKey(primaryKey) > 0, \"删除对象不存在\");\n    }\n    \n}\n"},{"name":"clientobject.java","code":"##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"CO\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/dto/clientobject\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dto.clientobject;\n\nimport cn.wyl.common.core.utils.poi.Excel;\nimport lombok.Data;\nimport java.util.Date;\nimport java.io.Serializable;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})客户端对象\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Data\npublic class $!{tableName} implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n    \n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})/**\n    * ${column.comment}\n    */#end\n    @Excel(name = \"${column.comment}\")\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n}"},{"name":"query.java","code":"##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Qry\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/dto/qry\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dto.qry;\n\nimport lombok.Data;\nimport java.util.Date;\nimport cn.wyl.common.core.dto.Query;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})查询对象\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@ApiModel(\"$!{tableInfo.comment}查询模型\")\n@Data\npublic class $!{tableName} extends Query {\n    \n#foreach($column in $tableInfo.otherColumn)\n    #if(($!{tool.getClsNameByFullName($column.type)} != 'Date') && ($!{column.name} != 'createBy') && ($!{column.name} != 'updateBy') && ($!{column.name} != 'remark'))\n        #if(${column.comment})/**\n        * ${column.comment}\n        */#end\n        @ApiModelProperty(value = \"${column.comment}\", position = $!{velocityCount})\n        private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n    #end\n#end\n\n}"},{"name":"pageQuery.java","code":"##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"PageQry\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/dto/qry\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dto.qry;\n\nimport lombok.Data;\nimport cn.wyl.common.core.dto.PageQuery;\nimport io.swagger.annotations.ApiModel;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})查询对象\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@ApiModel(\"$!{tableInfo.comment}分页查询模型\")\n@Data\npublic class $!{tableName} extends $!{tableInfo.name}Qry {\n    \n    private PageQuery pageQuery;\n\n}"},{"name":"addCommand.java","code":"##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"AddCommand\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/dto/command\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dto.command;\n\nimport cn.wyl.common.core.dto.Command;\nimport lombok.Data;\nimport java.util.Date;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.Size;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})查询对象\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@ApiModel(\"新增$!{tableInfo.comment}模型\")\n@Data\npublic class $!{tableName} extends Command {\n    \n#foreach($column in $tableInfo.otherColumn)\n    #if(${column.comment})/**\n    * ${column.comment}\n    */#end\n    #set($position=$!{velocityCount} + 1)\n    @ApiModelProperty(value = \"${column.comment}\", position = $position)\n#if($!column.obj.notNull)\n    @NotBlank(message = \"${column.comment}不能为空\")\n#end\n#if($!column.obj.dataType.length > 0)\n@Size(max = $!column.obj.dataType.length, message = \"${column.comment}长度不能超过{max}个字符\")\n#end\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n}"},{"name":"editCommand.java","code":"##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"EditCommand\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/dto/command\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dto.command;\n\nimport cn.wyl.common.core.dto.Command;\nimport lombok.Data;\nimport java.util.Date;\nimport io.swagger.annotations.ApiModel;\nimport io.swagger.annotations.ApiModelProperty;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})查询对象\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@ApiModel(\"编辑$!{tableInfo.comment}模型\")\n@Data\npublic class $!{tableName} extends $!{tableInfo.name}AddCommand {\n    \n#foreach($column in $tableInfo.pkColumn)\n    #if(${column.comment})/**\n    * ${column.comment}\n    */#end\n    @ApiModelProperty(position = $!{velocityCount}, value = \"${column.comment}\", hidden = true)\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n}"},{"name":"service.java","code":"##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\nimport $!{tableInfo.savePackageName}.gatewayimpl.database.dataobject.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.dto.clientobject.$!{tableInfo.name}CO;\nimport $!{tableInfo.savePackageName}.dto.qry.$!{tableInfo.name}Qry;\nimport $!{tableInfo.savePackageName}.dto.qry.$!{tableInfo.name}PageQry;\nimport $!{tableInfo.savePackageName}.dto.command.$!{tableInfo.name}AddCommand;\nimport $!{tableInfo.savePackageName}.dto.command.$!{tableInfo.name}EditCommand;\nimport cn.wyl.common.core.dto.SingleResponse;\nimport cn.wyl.common.core.dto.Response;\nimport cn.wyl.common.core.dto.PageResponse;\nimport cn.wyl.common.core.dto.MultiResponse;\nimport java.util.List;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务接口\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} {\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param primaryKey 主键\n     * @return 响应对象\n     */\n    SingleResponse<$!{tableInfo.name}CO> queryByPrimaryKey($!pk.shortType primaryKey);\n    \n    /**\n     * 通过实体作为筛选条件查询\n     *\n     * @param qry 实例对象\n     * @return 对象列表\n     */\n    MultiResponse<$!{tableInfo.name}CO> queryAll($!{tableInfo.name}Qry qry);\n    \n    /**\n     * 通过实体作为筛选条件查询\n     *\n     * @param pageQry 实例对象\n     * @return 对象列表\n     */\n    PageResponse<$!{tableInfo.name}CO> queryPage($!{tableInfo.name}PageQry pageQry);\n    \n    /**\n     * 新增数据\n     *\n     * @param command 实例对象\n     * @return 是否成功\n     */\n    Response insert($!{tableInfo.name}AddCommand command);\n\n    /**\n     * 修改数据\n     *\n     * @param command 实例对象\n     * @return 是否成功\n     */\n    Response update($!{tableInfo.name}EditCommand command);\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param primaryKeys 主键\n     * @return 是否成功\n     */\n    Response deleteByPrimaryKeys($!{tool.append($!pk.shortType, '[]')} primaryKeys);\n\n}"},{"name":"serviceImpl.java","code":"##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"ServiceImpl\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service/impl\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;\n\nimport $!{tableInfo.savePackageName}.gatewayimpl.database.dataobject.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.dto.clientobject.$!{tableInfo.name}CO;\nimport $!{tableInfo.savePackageName}.dto.qry.$!{tableInfo.name}Qry;\nimport $!{tableInfo.savePackageName}.dto.qry.$!{tableInfo.name}PageQry;\nimport $!{tableInfo.savePackageName}.dto.command.$!{tableInfo.name}AddCommand;\nimport $!{tableInfo.savePackageName}.dto.command.$!{tableInfo.name}EditCommand;\nimport $!{tableInfo.savePackageName}.domain.gateway.$!{tableInfo.name}Gateway;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\nimport cn.hutool.core.bean.BeanUtil;\nimport javax.annotation.Resource;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.stream.Collectors;\nimport cn.wyl.common.core.dto.MultiResponse;\nimport cn.wyl.common.core.dto.PageResponse;\nimport cn.wyl.common.core.dto.Response;\nimport cn.wyl.common.core.dto.SingleResponse;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表服务实现类\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Service\npublic class $!{tableName} implements $!{tableInfo.name}Service {\n    @Resource\n    private $!{tableInfo.name}Gateway $!tool.firstLowerCase($!{tableInfo.name})Gateway;\n\n    /**\n     * 通过ID查询单条数据\n     *\n     * @param primaryKey 主键\n     * @return 实例对象\n     */\n    @Override\n    public SingleResponse<$!{tableInfo.name}CO> queryByPrimaryKey($!pk.shortType primaryKey) {\n        $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}) = this.$!{tool.firstLowerCase($!{tableInfo.name})}Gateway.queryByPrimaryKey(primaryKey);  \n        $!{tableInfo.name}CO $!tool.firstLowerCase($!{tableInfo.name})CO = new $!{tableInfo.name}CO();\n        BeanUtil.copyProperties($!tool.firstLowerCase($!{tableInfo.name}), $!tool.firstLowerCase($!{tableInfo.name})CO);\n        return SingleResponse.of($!tool.firstLowerCase($!{tableInfo.name})CO);\n    }\n\n    /**\n     * 通过实体作为筛选条件查询\n     *\n     * @param qry 实例对象\n     * @return 对象列表\n     */\n    @Override\n    public MultiResponse<$!{tableInfo.name}CO> queryAll($!{tableInfo.name}Qry qry) {\n        $!{tableInfo.name} $!{tool.firstLowerCase($!{tableInfo.name})}DO = new $!{tableInfo.name}();\n        BeanUtil.copyProperties(pageQry, $!{tool.firstLowerCase($!{tableInfo.name})}DO);\n        List<$!{tableInfo.name}> $!{tool.firstLowerCase($!{tableInfo.name})}List = $!{tool.firstLowerCase($!{tableInfo.name})}Gateway.queryAll($!{tool.firstLowerCase($!{tableInfo.name})}DO);\n        List<$!{tableInfo.name}CO> $!{tool.firstLowerCase($!{tableInfo.name})}COList = $!{tool.firstLowerCase($!{tableInfo.name})}List.stream().map($!{tool.firstLowerCase($!{tableInfo.name})} -> {\n            $!{tableInfo.name}CO $!{tool.firstLowerCase($!{tableInfo.name})}CO = new $!{tableInfo.name}CO();\n            BeanUtil.copyProperties($!{tool.firstLowerCase($!{tableInfo.name})}, $!{tool.firstLowerCase($!{tableInfo.name})}CO);\n            return $!{tool.firstLowerCase($!{tableInfo.name})}CO;\n        }).collect(Collectors.toList());\n        return MultiResponse.of($!{tool.firstLowerCase($!{tableInfo.name})}COList);\n    }\n    \n    /**\n     * 通过实体作为筛选条件查询\n     *\n     * @param pageQry 实例对象\n     * @return 对象列表\n     */\n    @Override\n    public PageResponse<$!{tableInfo.name}CO> queryPage($!{tableInfo.name}PageQry pageQry) {\n        $!{tableInfo.name} $!{tool.firstLowerCase($!{tableInfo.name})}DO = new $!{tableInfo.name}();\n        BeanUtil.copyProperties(pageQry, $!{tool.firstLowerCase($!{tableInfo.name})}DO);\n        PageResponse<$!{tableInfo.name}> pageResponse = $!{tool.firstLowerCase($!{tableInfo.name})}Gateway.queryPage($!{tool.firstLowerCase($!{tableInfo.name})}DO);\n        List<$!{tableInfo.name}> $!{tool.firstLowerCase($!{tableInfo.name})}List = pageResponse.getData();\n        List<$!{tableInfo.name}CO> $!{tool.firstLowerCase($!{tableInfo.name})}COList = $!{tool.firstLowerCase($!{tableInfo.name})}List.stream().map($!{tool.firstLowerCase($!{tableInfo.name})} -> {\n            $!{tableInfo.name}CO $!{tool.firstLowerCase($!{tableInfo.name})}CO = new $!{tableInfo.name}CO();\n            BeanUtil.copyProperties($!{tool.firstLowerCase($!{tableInfo.name})}, $!{tool.firstLowerCase($!{tableInfo.name})}CO);\n            return $!{tool.firstLowerCase($!{tableInfo.name})}CO;\n        }).collect(Collectors.toList());\n        return PageResponse.of($!{tool.firstLowerCase($!{tableInfo.name})}COList, pageResponse.getTotalCount(), pageResponse.getPageSize(), pageResponse.getPageIndex());\n    }\n\n    /**\n     * 新增数据\n     *\n     * @param command 实例对象\n     * @return 是否成功\n     */\n    @Override\n    public Response insert($!{tableInfo.name}AddCommand command) {\n        $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}) = new $!{tableInfo.name}();\n        BeanUtil.copyProperties(command, $!tool.firstLowerCase($!{tableInfo.name}));\n        this.$!{tool.firstLowerCase($!{tableInfo.name})}Gateway.insert($!tool.firstLowerCase($!{tableInfo.name}));\n        return Response.buildSuccess();\n    }\n\n    /**\n     * 修改数据\n     *\n     * @param command 实例对象\n     * @return 是否成功\n     */\n    @Override\n    public Response update($!{tableInfo.name}EditCommand command) {\n        $!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}) = new $!{tableInfo.name}();\n        BeanUtil.copyProperties(command, $!tool.firstLowerCase($!{tableInfo.name}));\n        this.$!{tool.firstLowerCase($!{tableInfo.name})}Gateway.update($!tool.firstLowerCase($!{tableInfo.name}));\n        return Response.buildSuccess();\n    }\n\n    /**\n     * 通过主键删除数据\n     *\n     * @param primaryKeys 主键\n     * @return 是否成功\n     */\n    @Override\n    public Response deleteByPrimaryKeys($!{tool.append($!pk.shortType, '[]')} primaryKeys) {\n        Arrays.asList(primaryKeys).stream().forEach(primaryKey -> this.$!{tool.firstLowerCase($!{tableInfo.name})}Gateway.deleteByPrimaryKey(primaryKey));\n        return Response.buildSuccess();\n    }\n}"},{"name":"controller.java","code":"##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Controller\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/web\"))\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}web;\n\nimport cn.wyl.common.core.dto.MultiResponse;\nimport cn.wyl.common.core.dto.PageResponse;\nimport cn.wyl.common.core.dto.Response;\nimport cn.wyl.common.core.dto.SingleResponse;\nimport cn.wyl.common.core.utils.poi.ExcelUtil;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport $!{tableInfo.savePackageName}.dto.clientobject.$!{tableInfo.name}CO;\nimport com.wyl.dict.dto.qry.SysNoticeQry;\nimport $!{tableInfo.savePackageName}.dto.qry.$!{tableInfo.name}PageQry;\nimport $!{tableInfo.savePackageName}.dto.command.$!{tableInfo.name}AddCommand;\nimport $!{tableInfo.savePackageName}.dto.command.$!{tableInfo.name}EditCommand;\nimport org.springframework.web.bind.annotation.*;\nimport javax.servlet.http.HttpServletResponse;\nimport org.springframework.validation.annotation.Validated;\nimport javax.annotation.Resource;\nimport com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiParam;\nimport io.swagger.annotations.ApiOperation;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})表控制层\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Api(tags = \"$!{tableInfo.comment}模块\")\n@RestController\n@RequestMapping(\"$!tool.firstLowerCase($tableInfo.name)\")\npublic class $!{tableName} {\n    /**\n     * 服务对象\n     */\n    @Resource\n    private $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;\n\n    /* 基础接口开始 */\n    @ApiOperationSupport(order = 1)\n    @ApiOperation(value = \"分页列表\")\n    @GetMapping(\"/pageList\")\n    public PageResponse<$!{tableInfo.name}CO> pageList($!{tableInfo.name}PageQry qry) {\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Service.queryPage(qry);\n    }\n\n    @ApiOperationSupport(order = 2)\n    @ApiOperation(value = \"根据主键查询详情\")\n    @GetMapping(value = \"/{id}\")\n    public SingleResponse<$!{tableInfo.name}CO> getInfo(@ApiParam(value = \"主键\", required = true)\n                                            @PathVariable $!pk.shortType id) {\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Service.queryByPrimaryKey(id);\n    }\n\n    @ApiOperationSupport(order = 3)\n    @ApiOperation(value = \"新增\")\n    @PostMapping\n    public Response add(@Validated @RequestBody $!{tableInfo.name}AddCommand command) {\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Service.insert(command);\n    }\n\n    @ApiOperationSupport(order = 4)\n    @ApiOperation(value = \"编辑\")\n    @PutMapping(\"{id}\")\n    public Response edit(@Validated @RequestBody $!{tableInfo.name}EditCommand command, @PathVariable Integer id) {\n        #foreach($column in $tableInfo.pkColumn)\n            command.set$!{tool.firstUpperCase($column.name)}(id);\n        #end\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Service.update(command);\n    }\n\n    @ApiOperationSupport(order = 5)\n    @ApiOperation(value = \"删除\")\n    @DeleteMapping(\"/{ids}\")\n    public Response remove(@ApiParam(value = \"主键\", required = true)\n                                 @PathVariable $!{tool.append($!pk.shortType, '[]')} ids) {\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Service.deleteByPrimaryKeys(ids);\n    }\n    \n    @ApiOperationSupport(order = 6)\n    @ApiOperation(value = \"导出\")\n    @PostMapping(\"/export\")\n    public void export(HttpServletResponse response, $!{tableInfo.name}Qry qry) {\n        MultiResponse<$!{tableInfo.name}CO> list = $!{tool.firstLowerCase($!{tableInfo.name})}Service.queryAll(qry);\n        ExcelUtil<$!{tableInfo.name}CO> util = new ExcelUtil<$!{tableInfo.name}CO>($!{tableInfo.name}CO.class);\n        util.exportExcel(response, list.getData(), \"$!{tableInfo.comment}数据\");\n    }\n    /* 基础接口结束 */\n\n}"},{"name":"index.vue","code":"##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tool.firstLowerCase($!{tableInfo.name})}, \".vue\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/static\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<template>\n  <div class=\"app-container\">\n    <!-- 搜索区域 -->\n    <el-form :model=\"queryParams\" ref=\"queryForm\" :inline=\"true\" v-show=\"showSearch\" label-width=\"68px\">\n\n    </el-form>\n\n    <!-- table tool区域 -->\n    <el-row :gutter=\"10\" class=\"mb8\">\n      <el-col :span=\"1.5\">\n        <el-button\n          type=\"primary\"\n          plain\n          icon=\"el-icon-plus\"\n          size=\"mini\"\n          @click=\"handleAdd\"\n        >新增\n        </el-button>\n      </el-col>\n      <right-toolbar :showSearch.sync=\"showSearch\" @queryTable=\"pageList\"></right-toolbar>\n    </el-row>  \n     <!-- table区域 -->\n    <el-table v-loading=\"loading\" :data=\"pageListData\">\n      <!--<el-table-column type=\"selection\" width=\"55\" align=\"center\"/>-->\n    #foreach($column in $tableInfo.fullColumn)\n      <el-table-column label=\"${column.comment}\" align=\"center\" prop=\"$!{column.name}\" width=\"100\" :show-overflow-tooltip=\"true\"/>\n    #end\n      <el-table-column label=\"操作\" align=\"center\">\n        <template slot-scope=\"scope\">\n          <el-button\n            size=\"mini\"\n            type=\"text\"\n            icon=\"el-icon-edit\"\n            @click=\"handleUpdate(scope.row)\"\n          >修改\n          </el-button>\n          <el-button\n            size=\"mini\"\n            type=\"text\"\n            icon=\"el-icon-delete\"\n            @click=\"handleDelete(scope.row)\"\n          >删除\n          </el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n    <!-- 分页组件区域 -->\n    <pagination\n      v-show=\"total>0\"\n      :total=\"total\"\n      :page.sync=\"queryParams.pageNum\"\n      :limit.sync=\"queryParams.pageSize\"\n      @pagination=\"pageList\"\n      />\n      \n    <!-- 添加或修改参数配置对话框 -->\n    <el-dialog :title=\"title\" :visible.sync=\"open\" width=\"780px\" append-to-body>\n      <el-form ref=\"form\" :model=\"form\" :rules=\"rules\" label-width=\"80px\">\n        <el-row>\n    #foreach($column in $tableInfo.otherColumn)\n      #if(($!{column.name} != 'createBy') && ($!{column.name} != 'updateBy') && ($!{column.name} != 'createTime') && ($!{column.name} != 'updateTime'))\n          <el-col :span=\"12\">\n            <el-form-item label=\"${column.comment}\" prop=\"$!{column.name}\">\n              <el-input v-model=\"form.$!{column.name}\" placeholder=\"请输入${column.comment}\"/>\n            </el-form-item>\n          </el-col>\n      #end\n    #end\n        </el-row>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button type=\"primary\" @click=\"submitForm\">确 定</el-button>\n        <el-button @click=\"cancel\">取 消</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\n  import {pageList, getInfo, add, edit, remove} from \"@/api/system/notice\";\n\n  export default {\n    name: \"Config\",\n    data() {\n      return {\n        // 遮罩层\n        loading: true,\n        // 选中数组\n        ids: [],\n        // 非单个禁用\n        single: true,\n        // 非多个禁用\n        multiple: true,\n        // 显示搜索条件\n        showSearch: true,\n        // 总条数\n        total: 0,\n        // 参数表格数据\n        pageListData: [],\n        // 弹出层标题\n        title: \"\",\n        // 是否显示弹出层\n        open: false,\n        // 日期范围\n        dateRange: [],\n        // 查询参数\n        queryParams: {\n          pageNum: 1,\n          pageSize: 10\n        },\n        // 表单参数\n        form: {},\n        // 表单校验\n        rules: {\n        }\n      };\n    },\n    created() {\n      this.pageList();\n    },\n    methods: {\n      /** 查询参数列表 */\n      pageList() {\n        this.loading = true;\n        pageList(this.addDateRange(this.queryParams, this.dateRange)).then(response => {\n                this.pageListData = response.data;\n                this.total = response.totalCount;\n                this.loading = false;\n            }\n        );\n      },\n      /** 搜索按钮操作 */\n      handleQuery() {\n        this.queryParams.pageNum = 1;\n        this.pageList();\n      },\n      /** 重置按钮操作 */\n      resetQuery() {\n        this.dateRange = [];\n        this.resetForm(\"queryForm\");\n        this.handleQuery();\n      },\n      // 表单重置\n      reset() {\n        this.form = {\n    #foreach($column in $tableInfo.fullColumn)\n      #if(($!{column.name} != 'createBy') && ($!{column.name} != 'updateBy') && ($!{column.name} != 'createTime') && ($!{column.name} != 'updateTime'))\n        $!{column.name}: undefined,\n      #end\n    #end\n          remark: undefined\n        };\n        this.resetForm(\"form\");\n      },\n      // 取消按钮\n      cancel() {\n        this.open = false;\n        this.reset();\n      },\n      /** 新增按钮操作 */\n      handleAdd() {\n        this.reset();\n        this.open = true;\n        this.title = \"添加参数\";\n      },\n      /** 修改按钮操作 */\n      handleUpdate(row) {\n        this.reset();\n        const $!pk.name = row.$!pk.name || this.ids\n        getInfo($!pk.name).then(response => {\n          this.form = response.data;\n          this.open = true;\n          this.title = \"修改参数\";\n        });\n      },\n      /** 提交按钮 */\n      submitForm: function () {\n      },\n      /** 删除按钮操作 */\n      handleDelete(row) {\n     \n      },\n      /** 导出按钮操作 */\n      handleExport() {\n        \n      },\n    }\n  };\n</script>\n\n\n\n"},{"name":"debug.json","code":"//调试表原始对象\n$!tool.debug($tableInfo.obj)\n\n//调试列原始对象\n$!tool.debug($tableInfo.fullColumn.get(0).obj)\n\n//调试列原始列类型\n$!tool.debug($tableInfo.fullColumn.get(0).obj.dataType)\n\n//获取原始列类型中的字段\nsqlType = $!tool.getField($tableInfo.fullColumn.get(0).obj.dataType, \"typeName\")\n\n//执行原始列类型中的方法\nsqlTypeLen = $!tableInfo.fullColumn.get(0).obj.dataType.getLength()\n"}]}},"columnConfig":{},"globalConfig":{}}